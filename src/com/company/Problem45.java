package com.company;

import java.util.ArrayList;
import java.util.List;

/**
 Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

 Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
 Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
 Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
 It can be verified that T285 = P165 = H143 = 40755.

 Find the next triangle number that is also pentagonal and hexagonal.
 */
public class Problem45 {
    /*
    Redundant
    private List<Integer> triangleNumbers = new ArrayList<>();
    private int nbrOfTriangles = 0;

    private List<Integer> pentagonalNumbers = new ArrayList<>();
    private int nbrOfPentagonals = 0;

    private List<Integer> hexagonalNumbers = new ArrayList<>();
    private int nbrOfHexagonals = 0;
    */


    public Problem45() {
        //TODO Function works but the numbers are to big for int or long to work... Fix use BigInteger?
        int triangleIndex = 285;
        int pentagonalIndex = 165;
        int hexagonalIndex = 143;

        long currentTriangleNumber = 40755;
        long pentagonalNumber = 40755;
        long hexagonalNumber = 40755;

        while(true) {
            triangleIndex++;
            currentTriangleNumber = triangle(triangleIndex);
            while(currentTriangleNumber > pentagonalNumber) {
                pentagonalIndex++;
                pentagonalNumber = pentagonal(pentagonalIndex);
            }
            while(currentTriangleNumber > hexagonalNumber) {
                hexagonalIndex++;
                hexagonalNumber = hexagonal(hexagonalIndex);
            }
            System.out.println("T" + currentTriangleNumber + " P" + pentagonalNumber + " H" + hexagonalNumber);
            if(currentTriangleNumber == pentagonalNumber && currentTriangleNumber == hexagonalNumber) {
                System.out.println("Found!");
                System.out.println("Number = " + currentTriangleNumber);

                break;
            }
        }

    }

    private long triangle(int n) {
        return (n * (n + 1) )/2;
    }

    private long pentagonal(int n) {
        return n * (3 * n - 1) /2;
    }

    private long hexagonal(int n) {
        return n * (2 * n - 1);
    }
/*
    Redundant
    private void addNextTriangleNbr() {
        triangleNumbers.add((triangle(nbrOfTriangles + 1)));
        nbrOfTriangles++;
    }

    private void addNextPentagonalNbr() {
        pentagonalNumbers.add((pentagonal(nbrOfPentagonals + 1)));
        nbrOfPentagonals++;
    }

    private void addNextHexagonNbr() {
        hexagonalNumbers.add((hexagonal(nbrOfHexagonals + 1)));
        nbrOfHexagonals++;
    }

*/

}

