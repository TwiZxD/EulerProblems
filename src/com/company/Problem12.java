package com.company;

import java.util.ArrayList;

/**
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */

/*
Triangle Number: 76576500
Found in: 445424 ms
 */
public class Problem12 {
    private ArrayList<Integer> triangleNumbers = new ArrayList<Integer>();
    public Problem12() {
        solveProblem();
    }

    private void solveProblem() {
        int currentNumber = 10000;

        //Adding 500 triangleNumbers
        for(int i = 0; i< 10000; i++) {
            addNextTriangleNumber();
        }
        int triangleNumber;
        int amountOfDivisors;
        while(true) {
            //System.out.println("Size: " + triangleNumbers.size() + " ");
            triangleNumber = triangleNumbers.get(currentNumber - 1);
            amountOfDivisors = findAmountOfDivisors(triangleNumber);
            if(amountOfDivisors > 500) {
                System.out.println("Found it!");
                System.out.println("Triangle Number: " + triangleNumber);
                return;
            }
            System.out.println("amount of divisors:" + amountOfDivisors);

            currentNumber++;
            addNextTriangleNumber();

        }
    }

    private void addNextTriangleNumber() {
        int i = triangleNumbers.size();
        if(i == 0) {
            triangleNumbers.add(0);
        } else {
            int nextTriangleNumber = triangleNumbers.get(i - 1) + i;
            triangleNumbers.add(nextTriangleNumber);
        }

    }

    private int findTriangleNumber(int numberOfTerms) {
        int triangleNumber = 0;
        for (int i = 0 ; i <= numberOfTerms; i ++) {
            triangleNumber = triangleNumber + i;
        }
        return triangleNumber;
    }

    private int findAmountOfDivisors(int number) {
        int amountOfDivisiors = 0;
        for(int i = 1; i <= number; i++) {
            if(number % i == 0) {
                amountOfDivisiors++;
            }
        }
        return amountOfDivisiors;
    }


}
