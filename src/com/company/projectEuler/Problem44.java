package com.company.projectEuler;

import java.util.ArrayList;
import java.util.List;

/**
 * Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

 It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

 Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference
 are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
 */
public class Problem44 {
    private List<Integer> pentagonalNumbers = new ArrayList<>();
    private int numberOfPentagonalNumbersInSearchMatrix = 0;

    public Problem44() {
        initPentaNumbers();
        findPentaPair();
    }

    private void initPentaNumbers() {
        if(pentagonalNumbers.size() == 0) {
            for(int i = 0 ; i <= 10; i++) {
                addNextPentagonalNumberToList();
            }
        }
    }

    /**
     * Finds Two Numbers Pj and Pk which is Pentagonal where the difference and sum of Pj and Pk are also pentagonal;
     * Pj and Pk are within the interval 0 - 10000
     */
    private void findPentaPair() {
        int j, k;
        j = 0;
        k = 0;
        while(j < 10000) {
            while(k + j < 10000) {
                k++;
                if(pentagonalNumbers.size() < k) {
                    addNextPentagonalNumberToList();
                }

                if(isSumDifPenta(pentagonalNumbers.get(j), pentagonalNumbers.get(k))) {
                    System.out.println("Found!");
                    System.out.println("Pj = " + j + " Pk = " + k);
                    System.out.println("Pj = " + pentagonalNumbers.get(j) + " Pk = " + pentagonalNumbers.get(k) );
                    System.out.println("Dif = " + ( pentagonalNumbers.get(k) - (pentagonalNumbers.get(j)) ));
                    break;
                }
            }
            j++;
            k = j+1;
        }
    }

    /**
     * Check if the Sum and Dif of two numbers are Pentagonal Numbers
     * @return true if both Sum and Dif of Pj and Pk are Pentagonal
     */
    private boolean isSumDifPenta(int Pj, int Pk) {
        int sumPjPk = Pj + Pk;
        int difPjPk = Pk - Pj;

        return checkIfPentagonal(sumPjPk) && checkIfPentagonal(difPjPk);
    }

    /**
     * The algoritm of pentagonal numbers.
     *
     * @param n Index of the pentagonal number.
     * @return a pentagonal number of index n.
     */
    private int pentagonal(int n) {
        return n *(3 * n - 1) /2;
    }

    /**
     * Search algorim for finding Pentagonal Numbers stored in an array.
     * The search algoritm will try to find the value by cutting the array in half until the number is found.
     * @param number The number that will be searched in the array.
     * @return true if number is a Pentagonal Number. False if number is not in the array.
     */
    private boolean checkIfPentagonal(int number) {
        //Check if number is valid.
        if (number <= 0) return false;

        //Check if number is smaller than right wall.  <--|      If not, push right wall.
        while (number < pentagonalNumbers.get(pentagonalNumbers.size() - 1)) {
            //Is the sample outside the array? -> Increase the amount of pentagonal numbers
                addNextPentagonalNumberToList();
        }

        int left = 0;
        int right = pentagonalNumbers.size() - 1;

                //Check if number is left wall.        //Check if number is right wall.
        if(number == pentagonalNumbers.get(left) || number == pentagonalNumbers.get(right)) {
            return true;
        }

        int middle;
        while(true) {
            //Is the number in the middle?
            middle = ((right - left) / 2);
            if(middle == 0) {
                //There are no numbers in between the walls.
                // and if the number is not the left or right wall then the number is not pentagonal.
                return false;
            } else {
                middle = middle + left;
                //Is number between left and middle point?
                if(number <  pentagonalNumbers.get(middle)) {
                    //Number is between left and middle.
                    right = middle;
                } else if( number > pentagonalNumbers.get(middle)) {
                    //Number is between middle and right.
                    left = middle;
                } else if(number == pentagonalNumbers.get(middle)) {
                    //Found pentagonal number
                    return true;
                }
            }
        }
    }

    private void addNextPentagonalNumberToList() {
        pentagonalNumbers.add((pentagonal(numberOfPentagonalNumbersInSearchMatrix + 1)));
        numberOfPentagonalNumbersInSearchMatrix++;
    }
}
